name: Unity Metadata Files Checker

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - develop

jobs:
  check-metadata-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout pull request branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 모든 히스토리 필요

      - name: Set pull request branch information
        run: |
          echo "BASE_BRANCH=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          echo "PR_AUTHOR=${{ github.event.pull_request.user.login }}" >> $GITHUB_ENV
          echo "PR_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "PR_URL=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV
          echo "PR_CREATED_AT=${{ github.event.pull_request.created_at }}" >> $GITHUB_ENV

      - name: Convert pull request created time to KST
        run: |
          UTC_TIME="${{ env.PR_CREATED_AT }}"
          KST_TIME=$(date -d "$UTC_TIME +9 hours" "+%Y-%m-%d %H:%M:%S KST")
          echo "PR_CREATED_AT_KST=$KST_TIME" >> $GITHUB_ENV

      - name: Get changed files
        id: changed_files
        run: |
          git fetch origin $BASE_BRANCH
          CHANGED_FILES=$(git diff --name-only origin/$BASE_BRANCH...HEAD)
          echo "$CHANGED_FILES" > changed_files.txt
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          cat changed_files.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Check .meta files for each changed file
        run: |
          error=0
          while read -r file; do
            if [[ "$file" == Test/Assets/* && ! "$file" =~ \.meta$ ]]; then
              meta_file="$file.meta"
              if [ ! -f "$meta_file" ]; then
                echo "::error file=$file::Missing meta file for $file"
                error=1
              fi
            fi
          done <<< "$CHANGED_FILES"

          echo "META_CHECK_RESULT=$error" >> $GITHUB_ENV
          if [ $error -eq 1 ]; then
            exit 1
          fi

      - name: Check for extra .meta files
        run: |
          error=0
          while read -r file; do
            if [[ "$file" == Test/Assets/*.meta ]]; then
              original_file="${file%.meta}"
              if [ ! -f "$original_file" ]; then
                echo "::error file=$file::Orphan .meta file exists without corresponding asset: $original_file"
                error=1
              fi
            fi
          done <<< "$CHANGED_FILES"

          echo "EXTRA_META_RESULT=$error" >> $GITHUB_ENV
          if [ $error -eq 1 ]; then
            exit 1
          fi

      - name: Notify to slack message
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="✅"
          RESULT="Success"
          COLOR="#36a64f"
          
          if [ "${{ env.META_CHECK_RESULT }}" != "0" ] || [ "${{ env.EXTRA_META_RESULT }}" != "0" ]; then
            STATUS="❌"
            RESULT="Failed"
            COLOR="#ff0000"
          fi

          PAYLOAD=$(jq -n \
            --arg status "$STATUS" \
            --arg color "$COLOR" \
            --arg result "$RESULT" \
            --arg author "${{ env.PR_AUTHOR }}" \
            --arg branch "${{ env.PR_BRANCH }}" \
            --arg number "${{ env.PR_NUMBER }}" \
            --arg url "${{ env.PR_URL }}" \
            --arg created "${{ env.PR_CREATED_AT_KST }}" \
            '{
              attachments: [
                {
                  color: $color,
                  title: "Pull Request #\($number) \($status)",
                  title_link: $url,
                  fields: [
                    {title: "Author", value: $author, short: true},
                    {title: "Branch", value: $branch, short: true},
                    {title: "Metadata File Check", value: $result, short: true},
                    {title: "Created At", value: $created, short: true}
                  ]
                }
              ]
            }'
          )

          curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" $SLACK_WEBHOOK_URL
