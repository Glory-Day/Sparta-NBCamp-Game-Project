//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Input/UI_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Backend.Util.Input
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Input/UI_Controls.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @UIControls: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @UIControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""UI_Controls"",
    ""maps"": [
        {
            ""name"": ""Inventory"",
            ""id"": ""8d8c2f9f-b24c-4269-80f7-24a3b138a9ab"",
            ""actions"": [
                {
                    ""name"": ""Click Left Mouse Button"",
                    ""type"": ""Button"",
                    ""id"": ""14760d1e-a321-4e2a-a38b-78cceda0c773"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click Right Mouse Button"",
                    ""type"": ""Button"",
                    ""id"": ""9e477611-cb38-4260-877c-94a1edad296e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""Value"",
                    ""id"": ""8c8db870-e2ca-4d74-81c1-1eb1aeefbee5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Press Left Control Button"",
                    ""type"": ""Button"",
                    ""id"": ""a234ce1b-0106-405c-b205-56c75ae9b108"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Press Left Shift Button"",
                    ""type"": ""Button"",
                    ""id"": ""a73ed4b5-3177-4216-9e4f-d246e464a8d8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f0b3d7d-3636-440e-a0ad-81cb6b1093d3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Desktop"",
                    ""action"": ""Click Left Mouse Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d9265fe-811a-4229-ac3c-ccf209ce5818"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Desktop"",
                    ""action"": ""Click Right Mouse Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b6d356b-5705-4865-a5a0-23bee2a9748e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Desktop"",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00502153-06fd-470a-b273-e628670a004e"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Desktop"",
                    ""action"": ""Press Left Control Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a36ec43-4216-4bf3-9fc4-a78c4118c9dd"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Desktop"",
                    ""action"": ""Press Left Shift Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Main"",
            ""id"": ""ef816cf3-f7e4-4dc1-ac66-330a86e4fd8c"",
            ""actions"": [
                {
                    ""name"": ""Open Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""8ba72cd5-0fbd-48b1-a016-be6693762a3d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cc59d776-5937-4cb3-aa39-47281e0be59c"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Desktop"",
            ""bindingGroup"": ""Desktop"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Inventory
            m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
            m_Inventory_ClickLeftMouseButton = m_Inventory.FindAction("Click Left Mouse Button", throwIfNotFound: true);
            m_Inventory_ClickRightMouseButton = m_Inventory.FindAction("Click Right Mouse Button", throwIfNotFound: true);
            m_Inventory_Drag = m_Inventory.FindAction("Drag", throwIfNotFound: true);
            m_Inventory_PressLeftControlButton = m_Inventory.FindAction("Press Left Control Button", throwIfNotFound: true);
            m_Inventory_PressLeftShiftButton = m_Inventory.FindAction("Press Left Shift Button", throwIfNotFound: true);
            // Main
            m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
            m_Main_OpenInventory = m_Main.FindAction("Open Inventory", throwIfNotFound: true);
        }

        ~@UIControls()
        {
            UnityEngine.Debug.Assert(!m_Inventory.enabled, "This will cause a leak and performance issues, UIControls.Inventory.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Main.enabled, "This will cause a leak and performance issues, UIControls.Main.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Inventory
        private readonly InputActionMap m_Inventory;
        private List<IInventoryActions> m_InventoryActionsCallbackInterfaces = new List<IInventoryActions>();
        private readonly InputAction m_Inventory_ClickLeftMouseButton;
        private readonly InputAction m_Inventory_ClickRightMouseButton;
        private readonly InputAction m_Inventory_Drag;
        private readonly InputAction m_Inventory_PressLeftControlButton;
        private readonly InputAction m_Inventory_PressLeftShiftButton;
        /// <summary>
        /// Provides access to input actions defined in input action map "Inventory".
        /// </summary>
        public struct InventoryActions
        {
            private @UIControls m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public InventoryActions(@UIControls wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "Inventory/ClickLeftMouseButton".
            /// </summary>
            public InputAction @ClickLeftMouseButton => m_Wrapper.m_Inventory_ClickLeftMouseButton;
            /// <summary>
            /// Provides access to the underlying input action "Inventory/ClickRightMouseButton".
            /// </summary>
            public InputAction @ClickRightMouseButton => m_Wrapper.m_Inventory_ClickRightMouseButton;
            /// <summary>
            /// Provides access to the underlying input action "Inventory/Drag".
            /// </summary>
            public InputAction @Drag => m_Wrapper.m_Inventory_Drag;
            /// <summary>
            /// Provides access to the underlying input action "Inventory/PressLeftControlButton".
            /// </summary>
            public InputAction @PressLeftControlButton => m_Wrapper.m_Inventory_PressLeftControlButton;
            /// <summary>
            /// Provides access to the underlying input action "Inventory/PressLeftShiftButton".
            /// </summary>
            public InputAction @PressLeftShiftButton => m_Wrapper.m_Inventory_PressLeftShiftButton;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_Inventory; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="InventoryActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="InventoryActions" />
            public void AddCallbacks(IInventoryActions instance)
            {
                if (instance == null || m_Wrapper.m_InventoryActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InventoryActionsCallbackInterfaces.Add(instance);
                @ClickLeftMouseButton.started += instance.OnClickLeftMouseButton;
                @ClickLeftMouseButton.performed += instance.OnClickLeftMouseButton;
                @ClickLeftMouseButton.canceled += instance.OnClickLeftMouseButton;
                @ClickRightMouseButton.started += instance.OnClickRightMouseButton;
                @ClickRightMouseButton.performed += instance.OnClickRightMouseButton;
                @ClickRightMouseButton.canceled += instance.OnClickRightMouseButton;
                @Drag.started += instance.OnDrag;
                @Drag.performed += instance.OnDrag;
                @Drag.canceled += instance.OnDrag;
                @PressLeftControlButton.started += instance.OnPressLeftControlButton;
                @PressLeftControlButton.performed += instance.OnPressLeftControlButton;
                @PressLeftControlButton.canceled += instance.OnPressLeftControlButton;
                @PressLeftShiftButton.started += instance.OnPressLeftShiftButton;
                @PressLeftShiftButton.performed += instance.OnPressLeftShiftButton;
                @PressLeftShiftButton.canceled += instance.OnPressLeftShiftButton;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="InventoryActions" />
            private void UnregisterCallbacks(IInventoryActions instance)
            {
                @ClickLeftMouseButton.started -= instance.OnClickLeftMouseButton;
                @ClickLeftMouseButton.performed -= instance.OnClickLeftMouseButton;
                @ClickLeftMouseButton.canceled -= instance.OnClickLeftMouseButton;
                @ClickRightMouseButton.started -= instance.OnClickRightMouseButton;
                @ClickRightMouseButton.performed -= instance.OnClickRightMouseButton;
                @ClickRightMouseButton.canceled -= instance.OnClickRightMouseButton;
                @Drag.started -= instance.OnDrag;
                @Drag.performed -= instance.OnDrag;
                @Drag.canceled -= instance.OnDrag;
                @PressLeftControlButton.started -= instance.OnPressLeftControlButton;
                @PressLeftControlButton.performed -= instance.OnPressLeftControlButton;
                @PressLeftControlButton.canceled -= instance.OnPressLeftControlButton;
                @PressLeftShiftButton.started -= instance.OnPressLeftShiftButton;
                @PressLeftShiftButton.performed -= instance.OnPressLeftShiftButton;
                @PressLeftShiftButton.canceled -= instance.OnPressLeftShiftButton;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="InventoryActions.UnregisterCallbacks(IInventoryActions)" />.
            /// </summary>
            /// <seealso cref="InventoryActions.UnregisterCallbacks(IInventoryActions)" />
            public void RemoveCallbacks(IInventoryActions instance)
            {
                if (m_Wrapper.m_InventoryActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="InventoryActions.AddCallbacks(IInventoryActions)" />
            /// <seealso cref="InventoryActions.RemoveCallbacks(IInventoryActions)" />
            /// <seealso cref="InventoryActions.UnregisterCallbacks(IInventoryActions)" />
            public void SetCallbacks(IInventoryActions instance)
            {
                foreach (var item in m_Wrapper.m_InventoryActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InventoryActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="InventoryActions" /> instance referencing this action map.
        /// </summary>
        public InventoryActions @Inventory => new InventoryActions(this);

        // Main
        private readonly InputActionMap m_Main;
        private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
        private readonly InputAction m_Main_OpenInventory;
        /// <summary>
        /// Provides access to input actions defined in input action map "Main".
        /// </summary>
        public struct MainActions
        {
            private @UIControls m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public MainActions(@UIControls wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "Main/OpenInventory".
            /// </summary>
            public InputAction @OpenInventory => m_Wrapper.m_Main_OpenInventory;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_Main; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="MainActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="MainActions" />
            public void AddCallbacks(IMainActions instance)
            {
                if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
                @OpenInventory.started += instance.OnOpenInventory;
                @OpenInventory.performed += instance.OnOpenInventory;
                @OpenInventory.canceled += instance.OnOpenInventory;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="MainActions" />
            private void UnregisterCallbacks(IMainActions instance)
            {
                @OpenInventory.started -= instance.OnOpenInventory;
                @OpenInventory.performed -= instance.OnOpenInventory;
                @OpenInventory.canceled -= instance.OnOpenInventory;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MainActions.UnregisterCallbacks(IMainActions)" />.
            /// </summary>
            /// <seealso cref="MainActions.UnregisterCallbacks(IMainActions)" />
            public void RemoveCallbacks(IMainActions instance)
            {
                if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="MainActions.AddCallbacks(IMainActions)" />
            /// <seealso cref="MainActions.RemoveCallbacks(IMainActions)" />
            /// <seealso cref="MainActions.UnregisterCallbacks(IMainActions)" />
            public void SetCallbacks(IMainActions instance)
            {
                foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="MainActions" /> instance referencing this action map.
        /// </summary>
        public MainActions @Main => new MainActions(this);
        private int m_DesktopSchemeIndex = -1;
        /// <summary>
        /// Provides access to the input control scheme.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
        public InputControlScheme DesktopScheme
        {
            get
            {
                if (m_DesktopSchemeIndex == -1) m_DesktopSchemeIndex = asset.FindControlSchemeIndex("Desktop");
                return asset.controlSchemes[m_DesktopSchemeIndex];
            }
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Inventory" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="InventoryActions.AddCallbacks(IInventoryActions)" />
        /// <seealso cref="InventoryActions.RemoveCallbacks(IInventoryActions)" />
        public interface IInventoryActions
        {
            /// <summary>
            /// Method invoked when associated input action "Click Left Mouse Button" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnClickLeftMouseButton(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Click Right Mouse Button" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnClickRightMouseButton(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Drag" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnDrag(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Press Left Control Button" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPressLeftControlButton(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Press Left Shift Button" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPressLeftShiftButton(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Main" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="MainActions.AddCallbacks(IMainActions)" />
        /// <seealso cref="MainActions.RemoveCallbacks(IMainActions)" />
        public interface IMainActions
        {
            /// <summary>
            /// Method invoked when associated input action "Open Inventory" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnOpenInventory(InputAction.CallbackContext context);
        }
    }
}
